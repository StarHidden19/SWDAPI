// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewAndNotificationAPI.Data;

namespace NewAndNotificationAPI.Migrations
{
    [DbContext(typeof(NewAndNotificationContext))]
    [Migration("20200624082917_migrations")]
    partial class migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NewAndNotificationAPI.Models.Post", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("topicId")
                        .HasColumnType("int");

                    b.HasKey("postId");

                    b.HasIndex("topicId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.PostTags", b =>
                {
                    b.Property<int>("PostTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("tagId")
                        .HasColumnType("int");

                    b.HasKey("PostTagId");

                    b.HasIndex("postId");

                    b.HasIndex("tagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("className")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("curriculum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("studentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.StudentTags", b =>
                {
                    b.Property<int>("StudentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("tagId")
                        .HasColumnType("int");

                    b.HasKey("StudentTagId");

                    b.HasIndex("studentId");

                    b.HasIndex("tagId");

                    b.ToTable("StudentTags");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.StudentTopics", b =>
                {
                    b.Property<int>("studentTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("topicId")
                        .HasColumnType("int");

                    b.HasKey("studentTopicId");

                    b.HasIndex("studentId");

                    b.HasIndex("topicId");

                    b.ToTable("StudentTopics");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.Tag", b =>
                {
                    b.Property<int>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("topicId")
                        .HasColumnType("int");

                    b.HasKey("tagId");

                    b.HasIndex("topicId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.Topic", b =>
                {
                    b.Property<int>("topicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("topicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.Post", b =>
                {
                    b.HasOne("NewAndNotificationAPI.Models.Topic", "topic")
                        .WithMany("posts")
                        .HasForeignKey("topicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.PostTags", b =>
                {
                    b.HasOne("NewAndNotificationAPI.Models.Post", "post")
                        .WithMany("PostTags")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NewAndNotificationAPI.Models.Tag", "tag")
                        .WithMany("PostTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.StudentTags", b =>
                {
                    b.HasOne("NewAndNotificationAPI.Models.Student", "student")
                        .WithMany("StudentTags")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NewAndNotificationAPI.Models.Tag", "tag")
                        .WithMany("StudentTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.StudentTopics", b =>
                {
                    b.HasOne("NewAndNotificationAPI.Models.Student", "student")
                        .WithMany("StudentTopics")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NewAndNotificationAPI.Models.Topic", "topic")
                        .WithMany("StudentTopics")
                        .HasForeignKey("topicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NewAndNotificationAPI.Models.Tag", b =>
                {
                    b.HasOne("NewAndNotificationAPI.Models.Topic", "topic")
                        .WithMany("tags")
                        .HasForeignKey("topicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
